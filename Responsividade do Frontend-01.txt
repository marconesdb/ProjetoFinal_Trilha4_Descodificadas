// frontend/src/components/Sidebar.jsx


import { Link, useLocation } from 'react-router-dom';
import { Home, Package, LogOut } from 'lucide-react';
import logo from '../assets/logo.png';

export function Sidebar() {
  const location = useLocation();

  const handleLogout = () => {
    localStorage.removeItem('userToken');
    window.location.href = '/login';
  };

  return (
    <div className="w-16 md:w-64 bg-green-800 text-white min-h-screen">
      <div className="p-2 md:p-4 items-center flex flex-col md:flex-row">
        <img src={logo} alt="IT support" className="h-12 w-12 md:h-16 md:w-16" />
        <p className="hidden md:block m-4 font-bold">IT support</p>
      </div>
      
      <nav className="mt-8">
        <div className="px-2 md:px-4">
          <Link to="/home">
            <div className={`flex items-center justify-center md:justify-start p-2 text-white hover:bg-green-700 rounded-md ${location.pathname === '/home' ? 'bg-green-700' : ''}`}>
              <Home className="h-5 w-5" />
              <span className="hidden md:block ml-2">Início</span>
            </div>
          </Link>
          
          <Link to="/stock">
            <div className={`mt-2 flex items-center justify-center md:justify-start p-2 text-white hover:bg-green-700 rounded-md ${location.pathname === '/stock' ? 'bg-green-700' : ''}`}>
              <Package className="h-5 w-5" />
              <span className="hidden md:block ml-2">Estoque</span>
            </div>
          </Link>
        </div>
      </nav>

      <div className="absolute bottom-0 p-2 md:p-4 w-16 md:w-64">
        <button 
          onClick={handleLogout} 
          className="flex items-center justify-center md:justify-start p-2 text-red-300 hover:text-red-100 hover:bg-red-800 rounded-md w-full transition-colors duration-200"
        >
          <LogOut className="h-5 w-5" />
          <span className="hidden md:block ml-2">Sair</span>
        </button>
      </div>
    </div>
  );
}







// src/components/pages/Home.jsx
import { useEffect, useState } from 'react';
import api from '../services/api';

export function Home() {
  const [components, setComponents] = useState([]);

  useEffect(() => {
    const fetchComponents = async () => {
      try {
        const response = await api.get('/components');
        setComponents(response.data);
      } catch (error) {
        console.error('Erro ao buscar componentes:', error);
      }
    };
    fetchComponents();
  }, []);

  return (
    <div className="p-4 md:p-8">
    <h1 className="text-lg md:text-xl mb-6">Lista de Componentes</h1>
    <div className="bg-white rounded-lg shadow p-4 md:p-6">
      <div className="overflow-x-auto">
        <table className="w-full min-w-[500px]">
          <thead>
            <tr className="border-b">
              <th className="text-left p-2">Código</th>
              <th className="text-left p-2">Componente</th>
              <th className="text-left p-2">Estoque</th>
            </tr>
          </thead>
          <tbody>
            {components.map((component) => (
              <tr key={component.id} className="border-b">
                <td className="p-2">{component.code}</td>
                <td className="p-2">{component.name}</td>
                <td className="p-2">{component.stock}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
  );
}







// frontend/src/pages/Stock.jsx

import { useEffect, useState } from 'react';
import { Save, Trash2, Search, Filter } from 'lucide-react';
import api from '../services/api';
import { Alert, AlertDescription } from '../ui/Alert';

export function Stock() {
  const [components, setComponents] = useState([]);
  const [search, setSearch] = useState('');
  const [loading, setLoading] = useState(false);
  const [editingComponent, setEditingComponent] = useState(null);
  const [editForm, setEditForm] = useState({
    name: '',
    stock: '',
  });
  const [alert, setAlert] = useState({ show: false, message: '', type: '' });

  const fetchComponents = async () => {
    setLoading(true);
    try {
      const response = await api.get('/components', {
        params: { search },
      });
      setComponents(response.data);
    } catch (error) {
      console.error('Erro ao buscar componentes:', error);
      showAlert('Erro ao buscar componentes', 'error');
    } finally {
      setLoading(false);
    }
  };

  const showAlert = (message, type = 'success') => {
    setAlert({ show: true, message, type });
    setTimeout(() => setAlert({ show: false, message: '', type: '' }), 3000);
  };

  const addComponent = async () => {
    try {
      const name = prompt('Digite o nome do componente:');
      const stock = parseInt(prompt('Digite a quantidade em estoque:')) || 0;

      if (!name) {
        showAlert('O nome do componente é obrigatório.', 'error');
        return;
      }

      const newComponent = {
        code: `COMP-${Date.now()}`,
        name,
        stock,
      };

      await api.post('/components', newComponent);
      showAlert('Componente adicionado com sucesso!');
      await fetchComponents();
    } catch (error) {
      console.error('Erro ao adicionar componente:', error);
      showAlert('Erro ao adicionar componente', 'error');
    }
  };

  const startEditing = (component) => {
    setEditingComponent(component);
    setEditForm({
      name: component.name,
      stock: component.stock.toString(),
    });
  };

  const saveEdit = async () => {
    if (!editingComponent) return;

    if (!editForm.name.trim()) {
      showAlert('O nome do componente não pode estar vazio.', 'error');
      return;
    }

    try {
      await api.put(`/components/${editingComponent.id}`, {
        name: editForm.name,
        stock: parseInt(editForm.stock),
      });
      setEditingComponent(null);
      showAlert('Componente atualizado com sucesso!');
      await fetchComponents();
    } catch (error) {
      console.error('Erro ao editar componente:', error.response?.data || error.message);
      showAlert('Erro ao atualizar componente', 'error');
    }
  };

  const deleteComponent = async (id) => {
    if (!confirm('Confirma a exclusão?')) return;

    try {
      await api.delete(`/components/${id}`);
      showAlert('Componente deletado com sucesso!');
      await fetchComponents();
    } catch (error) {
      console.error('Erro ao deletar componente:', error);
      showAlert('Erro ao deletar componente', 'error');
    }
  };

  useEffect(() => {
    fetchComponents();
  }, []);

  return (
    <div className="p-4 md:p-8">
    <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4 sm:gap-0">
      <div className="flex items-center">
        <h1 className="text-lg md:text-xl">Componentes / Estoque</h1>
      </div>
      <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-0">
        <span className="text-gray-600 sm:mr-2">{localStorage.getItem('userName')}</span>
        <span className="text-gray-400 text-sm">{localStorage.getItem('userEmail')}</span>
      </div>
    </div>

    {alert.show && (
      <Alert type={alert.type}>
        <AlertDescription>{alert.message}</AlertDescription>
      </Alert>
    )}

    <div className="bg-white rounded-lg shadow p-4 md:p-6 overflow-x-auto">
      <div className="flex flex-col sm:flex-row gap-4 mb-6">
        <div className="relative w-full sm:w-96">
          <Search className="absolute left-2 top-3 h-4 w-4 text-gray-500" />
          <input
            type="text"
            placeholder="Pesquisar"
            className="w-full p-2 border rounded pl-10 bg-gray-50"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && fetchComponents()}
          />
        </div>

        <div className="flex gap-2">
          <button
            onClick={fetchComponents}
            className="bg-green-800 text-white px-4 py-2 rounded hover:bg-green-600 font-bold inline-flex items-center"
          >
            <Filter className="h-4 w-4 mr-2" />
            {loading ? 'Carregando...' : 'Filtrar'}
          </button>

          <button
            onClick={addComponent}
            className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-700 font-bold"
          >
            Novo <span className="text-[20px] font-bold">+</span>
          </button>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full min-w-[600px]">
          <thead>
            <tr className="border-b">
              <th className="text-left p-2">Código</th>
              <th className="text-left p-2">Componente</th>
              <th className="text-left p-2">Estoque</th>
              <th className="text-left p-2">Ações</th>
            </tr>
          </thead>
          <tbody>
            {components.map((component) => (
              <tr key={component.id} className="border-b">
                <td className="p-2">{component.code}</td>
                <td className="p-2">
                  {editingComponent?.id === component.id ? (
                    <input
                      type="text"
                      value={editForm.name}
                      onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}
                      className="border rounded p-1 w-full"
                    />
                  ) : (
                    component.name
                  )}
                </td>
                <td className="p-2">
                  {editingComponent?.id === component.id ? (
                    <input
                      type="number"
                      value={editForm.stock}
                      onChange={(e) => setEditForm({ ...editForm, stock: e.target.value })}
                      className="border rounded p-1 w-20"
                    />
                  ) : (
                    component.stock
                  )}
                </td>
                <td className="p-2">
                  {editingComponent?.id === component.id ? (
                    <button
                      onClick={saveEdit}
                      className="text-green-600 hover:text-green-800 mr-2 inline-flex items-center"
                    >
                      <Save className="h-4 w-4 mr-1" />
                      Salvar
                    </button>
                  ) : (
                    <button
                      onClick={() => startEditing(component)}
                      className="text-green-600 hover:text-green-800 mr-2 inline-flex items-center"
                    >
                      <Save className="h-4 w-4 mr-1" />
                      Editar
                    </button>
                  )}
                  <button
                    onClick={() => deleteComponent(component.id)}
                    className="text-red-600 hover:text-red-800 inline-flex items-center"
                  >
                    <Trash2 className="h-4 w-4 mr-1" />
                    Deletar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
  );
}